/*
* Copyright 2025 heipiao233

* This file is part of "FH-UI for Slint".
* "FH-UI for Slint" is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* "FH-UI for Slint" is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with Foobar. If not, see <https://www.gnu.org/licenses/>. 
*/
import { FHPalette, FHFontSettings } from "styling.slint";
import { TabBarBase } from "builtin:/common/tabwidget-base.slint";

export component TabWidgetImpl inherits Rectangle {
    in property <length> tabbar-preferred-height;
    in property <length> tabbar-preferred-width;
    in property <length> content-min-height;
    in property <length> content-min-width;
    in property <int> current-index;
    in property <int> current-focused;
    out property <length> content-x: 0;
    out property <length> content-y: root.tabbar-preferred-height;
    out property <length> content-height: root.height - root.tabbar-preferred-height;
    out property <length> content-width: root.width;
    out property <length> tabbar-x: 0;
    out property <length> tabbar-y: 0;
    out property <length> tabbar-height: root.tabbar-preferred-height;
    out property <length> tabbar-width: root.width;

    preferred-width: root.content-min-width;
    min-width: max(root.content-min-width, root.tabbar-preferred-width);
    preferred-height: root.content-min-height + root.tabbar-preferred-height;
    min-height: root.content-min-height + root.tabbar-preferred-height;
}

export component TabImpl inherits Rectangle {
    // The currently focused tab
    in property <int> current-focused;
    // The index of this tab
    in property <int> tab-index;
    // The total number of tabs
    in property <int> num-tabs;
    in property <string> title <=> text.text;
    in property <bool> enabled: true;
    out property <bool> has-focus: root.current-focused == root.tab-index;
    // The currently selected tab
    in-out property <int> current;

    private property <bool> show-left-border: root.tab-index == 0 || root.is-current;
    private property <bool> show-right-border: root.current != root.tab-index + 1;
    private property <bool> is-current: root.tab-index == root.current;
    private property <length> inner-border-radius: 8px;

    min-width: max(32px, text.min-width);
    min-height: max(44px, text.min-height);
    horizontal-stretch: 0;
    vertical-stretch: 1;
    accessible-role: tab;
    accessible-enabled: root.enabled;
    accessible-label: root.title;
    accessible-item-index: root.tab-index;
    accessible-item-selectable: true;
    accessible-item-selected: root.is-current;
    accessible-action-default => { touch-area.clicked(); }

    Rectangle {
        y: 0;
        height: root.height - root.inner-border-radius;
        clip: true;
    }

    Rectangle {
        y: parent.height - self.height;
        height: 4px;
        states [
            current when root.is-current: {
                background: FHPalette.general.dark;
            }
            non-current when !root.is-current: {
                background: transparent;
            }
        ]

        animate background {
            duration: 0.3s;
        }
    }

    if (root.has-focus): Rectangle {
        border-color: FHPalette.border;
        border-width: 2px;
        border-radius: 2px;
    }

    touch-area := TouchArea {
        enabled <=> root.enabled;

        clicked => {
            root.current = root.tab-index;
        }
    }

    layout := HorizontalLayout {
        text := Text {
            vertical-alignment: center;
            horizontal-alignment: center;
            font-size: FHFontSettings.body.font-size;
            font-weight: FHFontSettings.body.font-weight;
            color: root.is-current || root.has-focus || touch-area.has-hover ? FHPalette.foreground : FHPalette.secondary-foreground;
            animate color {
                 duration: 0.3s;
            }
            accessible-role: none;
        }
    }
}

export component TabBarImpl inherits TabBarBase {
    // injected properties:
    // The currently focused tab
    in-out property <int> current-focused: focus-scope.has-focus ? focus-scope.focused-tab : -1;

    accessible-role: tab-list;
    accessible-delegate-focus: root.current-focused >= 0 ? root.current-focused : root.current;
    accessible-item-count: root.num-tabs;
    preferred-height: 44px;

    Flickable {
        HorizontalLayout {
            @children
        }
    }

    Rectangle {
        y: parent.height - self.height;
        background: FHPalette.border;
        height: 1px;
    }

    if focus-scope.has-focus: Rectangle {
        y: root.height - self.height;
        height: 2px;
        background: FHPalette.border;
    }

    focus-scope := FocusScope {
        property <int> focused-tab: 0;

        x: 0;
        // Do not react on clicks
        width: 0px;

        key-pressed(event) => {
            if (event.text == "\n") {
                root.current = root.current-focused;
                return accept;
            }
            if (event.text == Key.LeftArrow) {
                 self.focused-tab = Math.max(self.focused-tab - 1,  0);
                 return accept;
            }
            if (event.text == Key.RightArrow) {
                 self.focused-tab = Math.min(self.focused-tab + 1, root.num-tabs - 1);
                 return accept;
            }
            return reject;
        }

        key-released(event) => {
            if (event.text == " ") {
                root.current = root.current-focused;
                return accept;
            }
            return reject;
        }
    }
}

export component TabWidget inherits TabWidget { }
